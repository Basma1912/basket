
This "news" app provides a service for managing Mozilla newsletters.

Available newsletters:

* mozilla-and-you
* firefox-tips
* mobile
* beta
* aurora
* about-mozilla
* drumbeat
* addons
* hacks
* labs
* qa-news
* student-reps
* about-standards
* mobile-addon-dev
* addon-dev
* join-mozilla
* mozilla-phone
* app-dev

If 'auth-required' is specified, a token must be suffixed onto the API
URL, such as:

/news/user/<token>/

This is a user-specific token given away by the email backend or
basket in some manner (i.e. emailed to the user from basket). This
token allows clients to do more powerful things with the user.

The following URLs are available (assuming "/news" is app url):

/news/subscribe

  method: POST
  fields: email, format, country, lang, newsletters, optin, trigger_welcome
  returns: { status: ok } on success
           { status: error, desc: <desc>, fields: [<field>, ...] } on error

  This method subscribes the user to the newsletters defined in the
  "newsletters" field, which should be a comma-delimited list of
  newsletters. "email" and "newsletters" are required. "optin" should
  be Y or N depending if the user should automatically be opted in,
  default is Y. "trigger_welcome" should be Y to fire off a welcome email.

  format can be any of the following values: H, html, T, or text

/news/unsubscribe

  method: POST
  fields: email, newsletters, optout
  returns: { status: ok } on success
           { status: error, desc: <desc> } on error
  auth-required

  This method unsubscribes the user from the newsletters defined in
  the "newsletters" field, which should be a comma-delimited list of
  newsletters. If the "optout" parameter is set to Y, the user will be
  opted out of all newsletters. "email" and either "newsletters" or
  "optout" is required.

/news/user

  method: GET
  fields: *none*
  returns: { status: ok,
             email: <email>,
             format: <format>,
             country: <country>,
             lang: <lang>,
             newsletters: [<newsletter>, ...] } on success
           { status: error, desc: <desc> } on error
  auth-required

  Returns information about the user including all the newsletters
  he/she is subscribed to.

  method: POST
  fields: email, format, country, lang, newsletters, optin
  returns: { status: ok } on success
           { status: error, desc: <desc> } on error
  auth-required

  If POSTed, this method updates the user's data with the supplied
  fields. Note that the user is only subscribed to "newsletters" after
  this, meaning the user will be unsubscribed to all other
  newsletters. "optin" should be Y or N and opts in/out the user.

/news/debug-user

  method: GET
  fields: email, supertoken

  This is the same as a GET request to /user, except that you must
  pass in the email and a supertoken as GET params. The supertoken is
  a special token that should never be made public and lets devs debug
  users to make sure they were entered into the system correctly.